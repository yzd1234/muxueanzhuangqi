<?xml version="1.0" encoding="utf-8"?>
<manifest xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:tools="http://schemas.android.com/tools">

    <!-- 权限声明应该放在这里 -->
    <uses-permission android:name="android.permission.REQUEST_INSTALL_PACKAGES"/>
    <!-- READ_EXTERNAL_STORAGE 在 Android 13 (API 33) 及以上不再需要明确声明来读取媒体文件，
         但如果需要访问非媒体文件或兼容旧版本，可能仍需保留。
         如果你的 targetSdk 是 33 或更高，并且只需要访问媒体文件，可以考虑移除这个权限。
         如果需要访问所有文件，需要 MANAGE_EXTERNAL_STORAGE (需要特殊申请)。
         这里暂时保留，但请根据实际需求评估。 -->
    <uses-permission android:name="android.permission.READ_EXTERNAL_STORAGE"
                     android:maxSdkVersion="32" /> <!-- 建议添加 maxSdkVersion -->


    <application
        android:allowBackup="true"
        android:icon="@mipmap/ic_launcher"
        android:label="@string/app_name"
        android:supportsRtl="true"
        android:theme="@style/Theme.MaterialComponents.DayNight"
        tools:targetApi="19"> <!-- 注意：targetApi 在 application 标签通常用于覆盖特定属性，全局目标 API 由 targetSdkVersion 控制 -->
        <activity android:name=".MainActivity"
            android:exported="true">
            <intent-filter>
                <action android:name="android.intent.action.MAIN" />
                <category android:name="android.intent.category.LAUNCHER" />
            </intent-filter>
        </activity>
        <activity android:name=".SettingsActivity"/>
        <activity android:name=".AboutActivity"/>
    </application>

    <!-- uses-sdk 应该放在 application 外部 -->
    <uses-sdk
        android:minSdkVersion="19"
        android:targetSdkVersion="34" /> <!-- 确保 targetSdkVersion 与 app/build.gradle 一致 -->

    <!-- meta-data 通常放在 application 内部，但放在 manifest 根下也可以 -->
    <!-- 如果这些是用于构建脚本或库，放在这里可能没问题，但更常见的是在 application 内 -->
    <meta-data
        android:name="VERSION_NAME"
        android:value="Beta1.0" />
    <meta-data
        android:name="VERSION_CODE"
        android:value="20250504" /> <!-- 这个值应该与 app/build.gradle 中的 versionCode 匹配或由其生成 -->

</manifest>
<!-- 确保 manifest 标签后面没有任何内容 -->
<uses-permission android:name="android.permission.REQUEST_INSTALL_PACKAGES"/>
<uses-permission android:name="android.permission.READ_EXTERNAL_STORAGE"/>
<?xml version="1.0" encoding="utf-8"?>
<manifest xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:tools="http://schemas.android.com/tools">

    <!-- 权限声明应该放在这里 -->
    <uses-permission android:name="android.permission.REQUEST_INSTALL_PACKAGES"/>
    <!-- READ_EXTERNAL_STORAGE 在 Android 13 (API 33) 及以上不再需要明确声明来读取媒体文件，
         但如果需要访问非媒体文件或兼容旧版本，可能仍需保留。
         如果你的 targetSdk 是 33 或更高，并且只需要访问媒体文件，可以考虑移除这个权限。
         如果需要访问所有文件，需要 MANAGE_EXTERNAL_STORAGE (需要特殊申请)。
         这里暂时保留，但请根据实际需求评估。 -->
    <uses-permission android:name="android.permission.READ_EXTERNAL_STORAGE"
                     android:maxSdkVersion="32" /> <!-- 建议添加 maxSdkVersion -->


    <application
        android:allowBackup="true"
        android:icon="@mipmap/ic_launcher"
        android:label="@string/app_name"
        android:supportsRtl="true"
        android:theme="@style/Theme.MaterialComponents.DayNight"
        tools:targetApi="19"> <!-- 注意：targetApi 在 application 标签通常用于覆盖特定属性，全局目标 API 由 targetSdkVersion 控制 -->
        <activity android:name=".MainActivity"
            android:exported="true">
            <intent-filter>
                <action android:name="android.intent.action.MAIN" />
                <category android:name="android.intent.category.LAUNCHER" />
            </intent-filter>
        </activity>
        <activity android:name=".SettingsActivity"/>
        <activity android:name=".AboutActivity"/>
    </application>

    <!-- uses-sdk 应该放在 application 外部 -->
    <uses-sdk
        android:minSdkVersion="19"
        android:targetSdkVersion="34" /> <!-- 确保 targetSdkVersion 与 app/build.gradle 一致 -->

    <!-- meta-data 通常放在 application 内部，但放在 manifest 根下也可以 -->
    <!-- 如果这些是用于构建脚本或库，放在这里可能没问题，但更常见的是在 application 内 -->
    <meta-data
        android:name="VERSION_NAME"
        android:value="Beta1.0" />
    <meta-data
        android:name="VERSION_CODE"
        android:value="20250504" /> <!-- 这个值应该与 app/build.gradle 中的 versionCode 匹配或由其生成 -->

</manifest>
<!-- 确保 manifest 标签后面没有任何内容 -->
<uses-permission android:name="android.permission.REQUEST_INSTALL_PACKAGES"/>
<uses-permission android:name="android.permission.READ_EXTERNAL_STORAGE"/>
<?xml version="1.0" encoding="utf-8"?>
<manifest xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:tools="http://schemas.android.com/tools">

    <!-- 权限声明应该放在这里 -->
    <uses-permission android:name="android.permission.REQUEST_INSTALL_PACKAGES"/>
    <!-- READ_EXTERNAL_STORAGE 在 Android 13 (API 33) 及以上不再需要明确声明来读取媒体文件，
         但如果需要访问非媒体文件或兼容旧版本，可能仍需保留。
         如果你的 targetSdk 是 33 或更高，并且只需要访问媒体文件，可以考虑移除这个权限。
         如果需要访问所有文件，需要 MANAGE_EXTERNAL_STORAGE (需要特殊申请)。
         这里暂时保留，但请根据实际需求评估。 -->
    <uses-permission android:name="android.permission.READ_EXTERNAL_STORAGE"
                     android:maxSdkVersion="32" /> <!-- 建议添加 maxSdkVersion -->


    <application
        android:allowBackup="true"
        android:icon="@mipmap/ic_launcher"
        android:label="@string/app_name"
        android:supportsRtl="true"
        android:theme="@style/Theme.MaterialComponents.DayNight"
        tools:targetApi="19"> <!-- 注意：targetApi 在 application 标签通常用于覆盖特定属性，全局目标 API 由 targetSdkVersion 控制 -->
        <activity android:name=".MainActivity"
            android:exported="true">
            <intent-filter>
                <action android:name="android.intent.action.MAIN" />
                <category android:name="android.intent.category.LAUNCHER" />
            </intent-filter>
        </activity>
        <activity android:name=".SettingsActivity"/>
        <activity android:name=".AboutActivity"/>
    </application>

    <!-- uses-sdk 应该放在 application 外部 -->
    <uses-sdk
        android:minSdkVersion="19"
        android:targetSdkVersion="34" /> <!-- 确保 targetSdkVersion 与 app/build.gradle 一致 -->

    <!-- meta-data 通常放在 application 内部，但放在 manifest 根下也可以 -->
    <!-- 如果这些是用于构建脚本或库，放在这里可能没问题，但更常见的是在 application 内 -->
    <meta-data
        android:name="VERSION_NAME"
        android:value="Beta1.0" />
    <meta-data
        android:name="VERSION_CODE"
        android:value="20250504" /> <!-- 这个值应该与 app/build.gradle 中的 versionCode 匹配或由其生成 -->

</manifest>
<!-- 确保 manifest 标签后面没有任何内容 -->
<uses-permission android:name="android.permission.REQUEST_INSTALL_PACKAGES"/>
<uses-permission android:name="android.permission.READ_EXTERNAL_STORAGE"/>
<?xml version="1.0" encoding="utf-8"?>
<manifest xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:tools="http://schemas.android.com/tools">

    <!-- 权限声明应该放在这里 -->
    <uses-permission android:name="android.permission.REQUEST_INSTALL_PACKAGES"/>
    <!-- READ_EXTERNAL_STORAGE 在 Android 13 (API 33) 及以上不再需要明确声明来读取媒体文件，
         但如果需要访问非媒体文件或兼容旧版本，可能仍需保留。
         如果你的 targetSdk 是 33 或更高，并且只需要访问媒体文件，可以考虑移除这个权限。
         如果需要访问所有文件，需要 MANAGE_EXTERNAL_STORAGE (需要特殊申请)。
         这里暂时保留，但请根据实际需求评估。 -->
    <uses-permission android:name="android.permission.READ_EXTERNAL_STORAGE"
                     android:maxSdkVersion="32" /> <!-- 建议添加 maxSdkVersion -->


    <application
        android:allowBackup="true"
        android:icon="@mipmap/ic_launcher"
        android:label="@string/app_name"
        android:supportsRtl="true"
        android:theme="@style/Theme.MaterialComponents.DayNight"
        tools:targetApi="19"> <!-- 注意：targetApi 在 application 标签通常用于覆盖特定属性，全局目标 API 由 targetSdkVersion 控制 -->
        <activity android:name=".MainActivity"
            android:exported="true">
            <intent-filter>
                <action android:name="android.intent.action.MAIN" />
                <category android:name="android.intent.category.LAUNCHER" />
            </intent-filter>
        </activity>
        <activity android:name=".SettingsActivity"/>
        <activity android:name=".AboutActivity"/>
    </application>

    <!-- uses-sdk 应该放在 application 外部 -->
    <uses-sdk
        android:minSdkVersion="19"
        android:targetSdkVersion="34" /> <!-- 确保 targetSdkVersion 与 app/build.gradle 一致 -->

    <!-- meta-data 通常放在 application 内部，但放在 manifest 根下也可以 -->
    <!-- 如果这些是用于构建脚本或库，放在这里可能没问题，但更常见的是在 application 内 -->
    <meta-data
        android:name="VERSION_NAME"
        android:value="Beta1.0" />
    <meta-data
        android:name="VERSION_CODE"
        android:value="20250504" /> <!-- 这个值应该与 app/build.gradle 中的 versionCode 匹配或由其生成 -->

</manifest>
<!-- 确保 manifest 标签后面没有任何内容 -->
<uses-permission android:name="android.permission.REQUEST_INSTALL_PACKAGES"/>
<uses-permission android:name="android.permission.READ_EXTERNAL_STORAGE"/>
<?xml version="1.0" encoding="utf-8"?>
<manifest xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:tools="http://schemas.android.com/tools">

    <!-- 权限声明应该放在这里 -->
    <uses-permission android:name="android.permission.REQUEST_INSTALL_PACKAGES"/>
    <!-- READ_EXTERNAL_STORAGE 在 Android 13 (API 33) 及以上不再需要明确声明来读取媒体文件，
         但如果需要访问非媒体文件或兼容旧版本，可能仍需保留。
         如果你的 targetSdk 是 33 或更高，并且只需要访问媒体文件，可以考虑移除这个权限。
         如果需要访问所有文件，需要 MANAGE_EXTERNAL_STORAGE (需要特殊申请)。
         这里暂时保留，但请根据实际需求评估。 -->
    <uses-permission android:name="android.permission.READ_EXTERNAL_STORAGE"
                     android:maxSdkVersion="32" /> <!-- 建议添加 maxSdkVersion -->


    <application
        android:allowBackup="true"
        android:icon="@mipmap/ic_launcher"
        android:label="@string/app_name"
        android:supportsRtl="true"
        android:theme="@style/Theme.MaterialComponents.DayNight"
        tools:targetApi="19"> <!-- 注意：targetApi 在 application 标签通常用于覆盖特定属性，全局目标 API 由 targetSdkVersion 控制 -->
        <activity android:name=".MainActivity"
            android:exported="true">
            <intent-filter>
                <action android:name="android.intent.action.MAIN" />
                <category android:name="android.intent.category.LAUNCHER" />
            </intent-filter>
        </activity>
        <activity android:name=".SettingsActivity"/>
        <activity android:name=".AboutActivity"/>
    </application>

    <!-- uses-sdk 应该放在 application 外部 -->
    <uses-sdk
        android:minSdkVersion="19"
        android:targetSdkVersion="34" /> <!-- 确保 targetSdkVersion 与 app/build.gradle 一致 -->

    <!-- meta-data 通常放在 application 内部，但放在 manifest 根下也可以 -->
    <!-- 如果这些是用于构建脚本或库，放在这里可能没问题，但更常见的是在 application 内 -->
    <meta-data
        android:name="VERSION_NAME"
        android:value="Beta1.0" />
    <meta-data
        android:name="VERSION_CODE"
        android:value="20250504" /> <!-- 这个值应该与 app/build.gradle 中的 versionCode 匹配或由其生成 -->

</manifest>
<!-- 确保 manifest 标签后面没有任何内容 -->
<uses-permission android:name="android.permission.REQUEST_INSTALL_PACKAGES"/>
<uses-permission android:name="android.permission.READ_EXTERNAL_STORAGE"/>
<?xml version="1.0" encoding="utf-8"?>
<manifest xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:tools="http://schemas.android.com/tools">

    <!-- 权限声明应该放在这里 -->
    <uses-permission android:name="android.permission.REQUEST_INSTALL_PACKAGES"/>
    <!-- READ_EXTERNAL_STORAGE 在 Android 13 (API 33) 及以上不再需要明确声明来读取媒体文件，
         但如果需要访问非媒体文件或兼容旧版本，可能仍需保留。
         如果你的 targetSdk 是 33 或更高，并且只需要访问媒体文件，可以考虑移除这个权限。
         如果需要访问所有文件，需要 MANAGE_EXTERNAL_STORAGE (需要特殊申请)。
         这里暂时保留，但请根据实际需求评估。 -->
    <uses-permission android:name="android.permission.READ_EXTERNAL_STORAGE"
                     android:maxSdkVersion="32" /> <!-- 建议添加 maxSdkVersion -->


    <application
        android:allowBackup="true"
        android:icon="@mipmap/ic_launcher"
        android:label="@string/app_name"
        android:supportsRtl="true"
        android:theme="@style/Theme.MaterialComponents.DayNight"
        tools:targetApi="19"> <!-- 注意：targetApi 在 application 标签通常用于覆盖特定属性，全局目标 API 由 targetSdkVersion 控制 -->
        <activity android:name=".MainActivity"
            android:exported="true">
            <intent-filter>
                <action android:name="android.intent.action.MAIN" />
                <category android:name="android.intent.category.LAUNCHER" />
            </intent-filter>
        </activity>
        <activity android:name=".SettingsActivity"/>
        <activity android:name=".AboutActivity"/>
    </application>

    <!-- uses-sdk 应该放在 application 外部 -->
    <uses-sdk
        android:minSdkVersion="19"
        android:targetSdkVersion="34" /> <!-- 确保 targetSdkVersion 与 app/build.gradle 一致 -->

    <!-- meta-data 通常放在 application 内部，但放在 manifest 根下也可以 -->
    <!-- 如果这些是用于构建脚本或库，放在这里可能没问题，但更常见的是在 application 内 -->
    <meta-data
        android:name="VERSION_NAME"
        android:value="Beta1.0" />
    <meta-data
        android:name="VERSION_CODE"
        android:value="20250504" /> <!-- 这个值应该与 app/build.gradle 中的 versionCode 匹配或由其生成 -->

</manifest>
<!-- 确保 manifest 标签后面没有任何内容 -->
<uses-permission android:name="android.permission.REQUEST_INSTALL_PACKAGES"/>
<uses-permission android:name="android.permission.READ_EXTERNAL_STORAGE"/>
<?xml version="1.0" encoding="utf-8"?>
<manifest xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:tools="http://schemas.android.com/tools">

    <!-- 权限声明应该放在这里 -->
    <uses-permission android:name="android.permission.REQUEST_INSTALL_PACKAGES"/>
    <!-- READ_EXTERNAL_STORAGE 在 Android 13 (API 33) 及以上不再需要明确声明来读取媒体文件，
         但如果需要访问非媒体文件或兼容旧版本，可能仍需保留。
         如果你的 targetSdk 是 33 或更高，并且只需要访问媒体文件，可以考虑移除这个权限。
         如果需要访问所有文件，需要 MANAGE_EXTERNAL_STORAGE (需要特殊申请)。
         这里暂时保留，但请根据实际需求评估。 -->
    <uses-permission android:name="android.permission.READ_EXTERNAL_STORAGE"
                     android:maxSdkVersion="32" /> <!-- 建议添加 maxSdkVersion -->


    <application
        android:allowBackup="true"
        android:icon="@mipmap/ic_launcher"
        android:label="@string/app_name"
        android:supportsRtl="true"
        android:theme="@style/Theme.MaterialComponents.DayNight"
        tools:targetApi="19"> <!-- 注意：targetApi 在 application 标签通常用于覆盖特定属性，全局目标 API 由 targetSdkVersion 控制 -->
        <activity android:name=".MainActivity"
            android:exported="true">
            <intent-filter>
                <action android:name="android.intent.action.MAIN" />
                <category android:name="android.intent.category.LAUNCHER" />
            </intent-filter>
        </activity>
        <activity android:name=".SettingsActivity"/>
        <activity android:name=".AboutActivity"/>
    </application>

    <!-- uses-sdk 应该放在 application 外部 -->
    <uses-sdk
        android:minSdkVersion="19"
        android:targetSdkVersion="34" /> <!-- 确保 targetSdkVersion 与 app/build.gradle 一致 -->

    <!-- meta-data 通常放在 application 内部，但放在 manifest 根下也可以 -->
    <!-- 如果这些是用于构建脚本或库，放在这里可能没问题，但更常见的是在 application 内 -->
    <meta-data
        android:name="VERSION_NAME"
        android:value="Beta1.0" />
    <meta-data
        android:name="VERSION_CODE"
        android:value="20250504" /> <!-- 这个值应该与 app/build.gradle 中的 versionCode 匹配或由其生成 -->

</manifest>
<!-- 确保 manifest 标签后面没有任何内容 -->
<uses-permission android:name="android.permission.REQUEST_INSTALL_PACKAGES"/>
<uses-permission android:name="android.permission.READ_EXTERNAL_STORAGE"/>
<?xml version="1.0" encoding="utf-8"?>
<manifest xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:tools="http://schemas.android.com/tools">

    <!-- 权限声明应该放在这里 -->
    <uses-permission android:name="android.permission.REQUEST_INSTALL_PACKAGES"/>
    <!-- READ_EXTERNAL_STORAGE 在 Android 13 (API 33) 及以上不再需要明确声明来读取媒体文件，
         但如果需要访问非媒体文件或兼容旧版本，可能仍需保留。
         如果你的 targetSdk 是 33 或更高，并且只需要访问媒体文件，可以考虑移除这个权限。
         如果需要访问所有文件，需要 MANAGE_EXTERNAL_STORAGE (需要特殊申请)。
         这里暂时保留，但请根据实际需求评估。 -->
    <uses-permission android:name="android.permission.READ_EXTERNAL_STORAGE"
                     android:maxSdkVersion="32" /> <!-- 建议添加 maxSdkVersion -->


    <application
        android:allowBackup="true"
        android:icon="@mipmap/ic_launcher"
        android:label="@string/app_name"
        android:supportsRtl="true"
        android:theme="@style/Theme.MaterialComponents.DayNight"
        tools:targetApi="19"> <!-- 注意：targetApi 在 application 标签通常用于覆盖特定属性，全局目标 API 由 targetSdkVersion 控制 -->
        <activity android:name=".MainActivity"
            android:exported="true">
            <intent-filter>
                <action android:name="android.intent.action.MAIN" />
                <category android:name="android.intent.category.LAUNCHER" />
            </intent-filter>
        </activity>
        <activity android:name=".SettingsActivity"/>
        <activity android:name=".AboutActivity"/>
    </application>

    <!-- uses-sdk 应该放在 application 外部 -->
    <uses-sdk
        android:minSdkVersion="19"
        android:targetSdkVersion="34" /> <!-- 确保 targetSdkVersion 与 app/build.gradle 一致 -->

    <!-- meta-data 通常放在 application 内部，但放在 manifest 根下也可以 -->
    <!-- 如果这些是用于构建脚本或库，放在这里可能没问题，但更常见的是在 application 内 -->
    <meta-data
        android:name="VERSION_NAME"
        android:value="Beta1.0" />
    <meta-data
        android:name="VERSION_CODE"
        android:value="20250504" /> <!-- 这个值应该与 app/build.gradle 中的 versionCode 匹配或由其生成 -->

</manifest>
<!-- 确保 manifest 标签后面没有任何内容 -->
<uses-permission android:name="android.permission.REQUEST_INSTALL_PACKAGES"/>
<uses-permission android:name="android.permission.READ_EXTERNAL_STORAGE"/>
<?xml version="1.0" encoding="utf-8"?>
<manifest xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:tools="http://schemas.android.com/tools">

    <!-- 权限声明应该放在这里 -->
    <uses-permission android:name="android.permission.REQUEST_INSTALL_PACKAGES"/>
    <!-- READ_EXTERNAL_STORAGE 在 Android 13 (API 33) 及以上不再需要明确声明来读取媒体文件，
         但如果需要访问非媒体文件或兼容旧版本，可能仍需保留。
         如果你的 targetSdk 是 33 或更高，并且只需要访问媒体文件，可以考虑移除这个权限。
         如果需要访问所有文件，需要 MANAGE_EXTERNAL_STORAGE (需要特殊申请)。
         这里暂时保留，但请根据实际需求评估。 -->
    <uses-permission android:name="android.permission.READ_EXTERNAL_STORAGE"
                     android:maxSdkVersion="32" /> <!-- 建议添加 maxSdkVersion -->


    <application
        android:allowBackup="true"
        android:icon="@mipmap/ic_launcher"
        android:label="@string/app_name"
        android:supportsRtl="true"
        android:theme="@style/Theme.MaterialComponents.DayNight"
        tools:targetApi="19"> <!-- 注意：targetApi 在 application 标签通常用于覆盖特定属性，全局目标 API 由 targetSdkVersion 控制 -->
        <activity android:name=".MainActivity"
            android:exported="true">
            <intent-filter>
                <action android:name="android.intent.action.MAIN" />
                <category android:name="android.intent.category.LAUNCHER" />
            </intent-filter>
        </activity>
        <activity android:name=".SettingsActivity"/>
        <activity android:name=".AboutActivity"/>
    </application>

    <!-- uses-sdk 应该放在 application 外部 -->
    <uses-sdk
        android:minSdkVersion="19"
        android:targetSdkVersion="34" /> <!-- 确保 targetSdkVersion 与 app/build.gradle 一致 -->

    <!-- meta-data 通常放在 application 内部，但放在 manifest 根下也可以 -->
    <!-- 如果这些是用于构建脚本或库，放在这里可能没问题，但更常见的是在 application 内 -->
    <meta-data
        android:name="VERSION_NAME"
        android:value="Beta1.0" />
    <meta-data
        android:name="VERSION_CODE"
        android:value="20250504" /> <!-- 这个值应该与 app/build.gradle 中的 versionCode 匹配或由其生成 -->

</manifest>
<!-- 确保 manifest 标签后面没有任何内容 -->
<uses-permission android:name="android.permission.REQUEST_INSTALL_PACKAGES"/>
<uses-permission android:name="android.permission.READ_EXTERNAL_STORAGE"/>
<?xml version="1.0" encoding="utf-8"?>
<manifest xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:tools="http://schemas.android.com/tools">

    <!-- 权限声明应该放在这里 -->
    <uses-permission android:name="android.permission.REQUEST_INSTALL_PACKAGES"/>
    <!-- READ_EXTERNAL_STORAGE 在 Android 13 (API 33) 及以上不再需要明确声明来读取媒体文件，
         但如果需要访问非媒体文件或兼容旧版本，可能仍需保留。
         如果你的 targetSdk 是 33 或更高，并且只需要访问媒体文件，可以考虑移除这个权限。
         如果需要访问所有文件，需要 MANAGE_EXTERNAL_STORAGE (需要特殊申请)。
         这里暂时保留，但请根据实际需求评估。 -->
    <uses-permission android:name="android.permission.READ_EXTERNAL_STORAGE"
                     android:maxSdkVersion="32" /> <!-- 建议添加 maxSdkVersion -->


    <application
        android:allowBackup="true"
        android:icon="@mipmap/ic_launcher"
        android:label="@string/app_name"
        android:supportsRtl="true"
        android:theme="@style/Theme.MaterialComponents.DayNight"
        tools:targetApi="19"> <!-- 注意：targetApi 在 application 标签通常用于覆盖特定属性，全局目标 API 由 targetSdkVersion 控制 -->
        <activity android:name=".MainActivity"
            android:exported="true">
            <intent-filter>
                <action android:name="android.intent.action.MAIN" />
                <category android:name="android.intent.category.LAUNCHER" />
            </intent-filter>
        </activity>
        <activity android:name=".SettingsActivity"/>
        <activity android:name=".AboutActivity"/>
    </application>

    <!-- uses-sdk 应该放在 application 外部 -->
    <uses-sdk
        android:minSdkVersion="19"
        android:targetSdkVersion="34" /> <!-- 确保 targetSdkVersion 与 app/build.gradle 一致 -->

    <!-- meta-data 通常放在 application 内部，但放在 manifest 根下也可以 -->
    <!-- 如果这些是用于构建脚本或库，放在这里可能没问题，但更常见的是在 application 内 -->
    <meta-data
        android:name="VERSION_NAME"
        android:value="Beta1.0" />
    <meta-data
        android:name="VERSION_CODE"
        android:value="20250504" /> <!-- 这个值应该与 app/build.gradle 中的 versionCode 匹配或由其生成 -->

</manifest>
<!-- 确保 manifest 标签后面没有任何内容 -->
<uses-permission android:name="android.permission.REQUEST_INSTALL_PACKAGES"/>
<uses-permission android:name="android.permission.READ_EXTERNAL_STORAGE"/>
<?xml version="1.0" encoding="utf-8"?>
<manifest xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:tools="http://schemas.android.com/tools">

    <!-- 权限声明应该放在这里 -->
    <uses-permission android:name="android.permission.REQUEST_INSTALL_PACKAGES"/>
    <!-- READ_EXTERNAL_STORAGE 在 Android 13 (API 33) 及以上不再需要明确声明来读取媒体文件，
         但如果需要访问非媒体文件或兼容旧版本，可能仍需保留。
         如果你的 targetSdk 是 33 或更高，并且只需要访问媒体文件，可以考虑移除这个权限。
         如果需要访问所有文件，需要 MANAGE_EXTERNAL_STORAGE (需要特殊申请)。
         这里暂时保留，但请根据实际需求评估。 -->
    <uses-permission android:name="android.permission.READ_EXTERNAL_STORAGE"
                     android:maxSdkVersion="32" /> <!-- 建议添加 maxSdkVersion -->


    <application
        android:allowBackup="true"
        android:icon="@mipmap/ic_launcher"
        android:label="@string/app_name"
        android:supportsRtl="true"
        android:theme="@style/Theme.MaterialComponents.DayNight"
        tools:targetApi="19"> <!-- 注意：targetApi 在 application 标签通常用于覆盖特定属性，全局目标 API 由 targetSdkVersion 控制 -->
        <activity android:name=".MainActivity"
            android:exported="true">
            <intent-filter>
                <action android:name="android.intent.action.MAIN" />
                <category android:name="android.intent.category.LAUNCHER" />
            </intent-filter>
        </activity>
        <activity android:name=".SettingsActivity"/>
        <activity android:name=".AboutActivity"/>
    </application>

    <!-- uses-sdk 应该放在 application 外部 -->
    <uses-sdk
        android:minSdkVersion="19"
        android:targetSdkVersion="34" /> <!-- 确保 targetSdkVersion 与 app/build.gradle 一致 -->

    <!-- meta-data 通常放在 application 内部，但放在 manifest 根下也可以 -->
    <!-- 如果这些是用于构建脚本或库，放在这里可能没问题，但更常见的是在 application 内 -->
    <meta-data
        android:name="VERSION_NAME"
        android:value="Beta1.0" />
    <meta-data
        android:name="VERSION_CODE"
        android:value="20250504" /> <!-- 这个值应该与 app/build.gradle 中的 versionCode 匹配或由其生成 -->

</manifest>
<!-- 确保 manifest 标签后面没有任何内容 -->
<uses-permission android:name="android.permission.REQUEST_INSTALL_PACKAGES"/>
<uses-permission android:name="android.permission.READ_EXTERNAL_STORAGE"/>
<?xml version="1.0" encoding="utf-8"?>
<manifest xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:tools="http://schemas.android.com/tools">

    <!-- 权限声明应该放在这里 -->
    <uses-permission android:name="android.permission.REQUEST_INSTALL_PACKAGES"/>
    <!-- READ_EXTERNAL_STORAGE 在 Android 13 (API 33) 及以上不再需要明确声明来读取媒体文件，
         但如果需要访问非媒体文件或兼容旧版本，可能仍需保留。
         如果你的 targetSdk 是 33 或更高，并且只需要访问媒体文件，可以考虑移除这个权限。
         如果需要访问所有文件，需要 MANAGE_EXTERNAL_STORAGE (需要特殊申请)。
         这里暂时保留，但请根据实际需求评估。 -->
    <uses-permission android:name="android.permission.READ_EXTERNAL_STORAGE"
                     android:maxSdkVersion="32" /> <!-- 建议添加 maxSdkVersion -->


    <application
        android:allowBackup="true"
        android:icon="@mipmap/ic_launcher"
        android:label="@string/app_name"
        android:supportsRtl="true"
        android:theme="@style/Theme.MaterialComponents.DayNight"
        tools:targetApi="19"> <!-- 注意：targetApi 在 application 标签通常用于覆盖特定属性，全局目标 API 由 targetSdkVersion 控制 -->
        <activity android:name=".MainActivity"
            android:exported="true">
            <intent-filter>
                <action android:name="android.intent.action.MAIN" />
                <category android:name="android.intent.category.LAUNCHER" />
            </intent-filter>
        </activity>
        <activity android:name=".SettingsActivity"/>
        <activity android:name=".AboutActivity"/>
    </application>

    <!-- uses-sdk 应该放在 application 外部 -->
    <uses-sdk
        android:minSdkVersion="19"
        android:targetSdkVersion="34" /> <!-- 确保 targetSdkVersion 与 app/build.gradle 一致 -->

    <!-- meta-data 通常放在 application 内部，但放在 manifest 根下也可以 -->
    <!-- 如果这些是用于构建脚本或库，放在这里可能没问题，但更常见的是在 application 内 -->
    <meta-data
        android:name="VERSION_NAME"
        android:value="Beta1.0" />
    <meta-data
        android:name="VERSION_CODE"
        android:value="20250504" /> <!-- 这个值应该与 app/build.gradle 中的 versionCode 匹配或由其生成 -->

</manifest>
<!-- 确保 manifest 标签后面没有任何内容 -->
<uses-permission android:name="android.permission.REQUEST_INSTALL_PACKAGES"/>
<uses-permission android:name="android.permission.READ_EXTERNAL_STORAGE"/>
<?xml version="1.0" encoding="utf-8"?>
<manifest xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:tools="http://schemas.android.com/tools">

    <!-- 权限声明应该放在这里 -->
    <uses-permission android:name="android.permission.REQUEST_INSTALL_PACKAGES"/>
    <!-- READ_EXTERNAL_STORAGE 在 Android 13 (API 33) 及以上不再需要明确声明来读取媒体文件，
         但如果需要访问非媒体文件或兼容旧版本，可能仍需保留。
         如果你的 targetSdk 是 33 或更高，并且只需要访问媒体文件，可以考虑移除这个权限。
         如果需要访问所有文件，需要 MANAGE_EXTERNAL_STORAGE (需要特殊申请)。
         这里暂时保留，但请根据实际需求评估。 -->
    <uses-permission android:name="android.permission.READ_EXTERNAL_STORAGE"
                     android:maxSdkVersion="32" /> <!-- 建议添加 maxSdkVersion -->


    <application
        android:allowBackup="true"
        android:icon="@mipmap/ic_launcher"
        android:label="@string/app_name"
        android:supportsRtl="true"
        android:theme="@style/Theme.MaterialComponents.DayNight"
        tools:targetApi="19"> <!-- 注意：targetApi 在 application 标签通常用于覆盖特定属性，全局目标 API 由 targetSdkVersion 控制 -->
        <activity android:name=".MainActivity"
            android:exported="true">
            <intent-filter>
                <action android:name="android.intent.action.MAIN" />
                <category android:name="android.intent.category.LAUNCHER" />
            </intent-filter>
        </activity>
        <activity android:name=".SettingsActivity"/>
        <activity android:name=".AboutActivity"/>
    </application>

    <!-- uses-sdk 应该放在 application 外部 -->
    <uses-sdk
        android:minSdkVersion="19"
        android:targetSdkVersion="34" /> <!-- 确保 targetSdkVersion 与 app/build.gradle 一致 -->

    <!-- meta-data 通常放在 application 内部，但放在 manifest 根下也可以 -->
    <!-- 如果这些是用于构建脚本或库，放在这里可能没问题，但更常见的是在 application 内 -->
    <meta-data
        android:name="VERSION_NAME"
        android:value="Beta1.0" />
    <meta-data
        android:name="VERSION_CODE"
        android:value="20250504" /> <!-- 这个值应该与 app/build.gradle 中的 versionCode 匹配或由其生成 -->

</manifest>
<!-- 确保 manifest 标签后面没有任何内容 -->
<uses-permission android:name="android.permission.REQUEST_INSTALL_PACKAGES"/>
<uses-permission android:name="android.permission.READ_EXTERNAL_STORAGE"/>
<?xml version="1.0" encoding="utf-8"?>
<manifest xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:tools="http://schemas.android.com/tools">

    <!-- 权限声明应该放在这里 -->
    <uses-permission android:name="android.permission.REQUEST_INSTALL_PACKAGES"/>
    <!-- READ_EXTERNAL_STORAGE 在 Android 13 (API 33) 及以上不再需要明确声明来读取媒体文件，
         但如果需要访问非媒体文件或兼容旧版本，可能仍需保留。
         如果你的 targetSdk 是 33 或更高，并且只需要访问媒体文件，可以考虑移除这个权限。
         如果需要访问所有文件，需要 MANAGE_EXTERNAL_STORAGE (需要特殊申请)。
         这里暂时保留，但请根据实际需求评估。 -->
    <uses-permission android:name="android.permission.READ_EXTERNAL_STORAGE"
                     android:maxSdkVersion="32" /> <!-- 建议添加 maxSdkVersion -->


    <application
        android:allowBackup="true"
        android:icon="@mipmap/ic_launcher"
        android:label="@string/app_name"
        android:supportsRtl="true"
        android:theme="@style/Theme.MaterialComponents.DayNight"
        tools:targetApi="19"> <!-- 注意：targetApi 在 application 标签通常用于覆盖特定属性，全局目标 API 由 targetSdkVersion 控制 -->
        <activity android:name=".MainActivity"
            android:exported="true">
            <intent-filter>
                <action android:name="android.intent.action.MAIN" />
                <category android:name="android.intent.category.LAUNCHER" />
            </intent-filter>
        </activity>
        <activity android:name=".SettingsActivity"/>
        <activity android:name=".AboutActivity"/>
    </application>

    <!-- uses-sdk 应该放在 application 外部 -->
    <uses-sdk
        android:minSdkVersion="19"
        android:targetSdkVersion="34" /> <!-- 确保 targetSdkVersion 与 app/build.gradle 一致 -->

    <!-- meta-data 通常放在 application 内部，但放在 manifest 根下也可以 -->
    <!-- 如果这些是用于构建脚本或库，放在这里可能没问题，但更常见的是在 application 内 -->
    <meta-data
        android:name="VERSION_NAME"
        android:value="Beta1.0" />
    <meta-data
        android:name="VERSION_CODE"
        android:value="20250504" /> <!-- 这个值应该与 app/build.gradle 中的 versionCode 匹配或由其生成 -->

</manifest>
<!-- 确保 manifest 标签后面没有任何内容 -->
<uses-permission android:name="android.permission.REQUEST_INSTALL_PACKAGES"/>
<uses-permission android:name="android.permission.READ_EXTERNAL_STORAGE"/>
<?xml version="1.0" encoding="utf-8"?>
<manifest xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:tools="http://schemas.android.com/tools">

    <!-- 权限声明应该放在这里 -->
    <uses-permission android:name="android.permission.REQUEST_INSTALL_PACKAGES"/>
    <!-- READ_EXTERNAL_STORAGE 在 Android 13 (API 33) 及以上不再需要明确声明来读取媒体文件，
         但如果需要访问非媒体文件或兼容旧版本，可能仍需保留。
         如果你的 targetSdk 是 33 或更高，并且只需要访问媒体文件，可以考虑移除这个权限。
         如果需要访问所有文件，需要 MANAGE_EXTERNAL_STORAGE (需要特殊申请)。
         这里暂时保留，但请根据实际需求评估。 -->
    <uses-permission android:name="android.permission.READ_EXTERNAL_STORAGE"
                     android:maxSdkVersion="32" /> <!-- 建议添加 maxSdkVersion -->


    <application
        android:allowBackup="true"
        android:icon="@mipmap/ic_launcher"
        android:label="@string/app_name"
        android:supportsRtl="true"
        android:theme="@style/Theme.MaterialComponents.DayNight"
        tools:targetApi="19"> <!-- 注意：targetApi 在 application 标签通常用于覆盖特定属性，全局目标 API 由 targetSdkVersion 控制 -->
        <activity android:name=".MainActivity"
            android:exported="true">
            <intent-filter>
                <action android:name="android.intent.action.MAIN" />
                <category android:name="android.intent.category.LAUNCHER" />
            </intent-filter>
        </activity>
        <activity android:name=".SettingsActivity"/>
        <activity android:name=".AboutActivity"/>
    </application>

    <!-- uses-sdk 应该放在 application 外部 -->
    <uses-sdk
        android:minSdkVersion="19"
        android:targetSdkVersion="34" /> <!-- 确保 targetSdkVersion 与 app/build.gradle 一致 -->

    <!-- meta-data 通常放在 application 内部，但放在 manifest 根下也可以 -->
    <!-- 如果这些是用于构建脚本或库，放在这里可能没问题，但更常见的是在 application 内 -->
    <meta-data
        android:name="VERSION_NAME"
        android:value="Beta1.0" />
    <meta-data
        android:name="VERSION_CODE"
        android:value="20250504" /> <!-- 这个值应该与 app/build.gradle 中的 versionCode 匹配或由其生成 -->

</manifest>
<!-- 确保 manifest 标签后面没有任何内容 -->
<uses-permission android:name="android.permission.REQUEST_INSTALL_PACKAGES"/>
<uses-permission android:name="android.permission.READ_EXTERNAL_STORAGE"/>
<?xml version="1.0" encoding="utf-8"?>
<manifest xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:tools="http://schemas.android.com/tools">

    <!-- 权限声明应该放在这里 -->
    <uses-permission android:name="android.permission.REQUEST_INSTALL_PACKAGES"/>
    <!-- READ_EXTERNAL_STORAGE 在 Android 13 (API 33) 及以上不再需要明确声明来读取媒体文件，
         但如果需要访问非媒体文件或兼容旧版本，可能仍需保留。
         如果你的 targetSdk 是 33 或更高，并且只需要访问媒体文件，可以考虑移除这个权限。
         如果需要访问所有文件，需要 MANAGE_EXTERNAL_STORAGE (需要特殊申请)。
         这里暂时保留，但请根据实际需求评估。 -->
    <uses-permission android:name="android.permission.READ_EXTERNAL_STORAGE"
                     android:maxSdkVersion="32" /> <!-- 建议添加 maxSdkVersion -->


    <application
        android:allowBackup="true"
        android:icon="@mipmap/ic_launcher"
        android:label="@string/app_name"
        android:supportsRtl="true"
        android:theme="@style/Theme.MaterialComponents.DayNight"
        tools:targetApi="19"> <!-- 注意：targetApi 在 application 标签通常用于覆盖特定属性，全局目标 API 由 targetSdkVersion 控制 -->
        <activity android:name=".MainActivity"
            android:exported="true">
            <intent-filter>
                <action android:name="android.intent.action.MAIN" />
                <category android:name="android.intent.category.LAUNCHER" />
            </intent-filter>
        </activity>
        <activity android:name=".SettingsActivity"/>
        <activity android:name=".AboutActivity"/>
    </application>

    <!-- uses-sdk 应该放在 application 外部 -->
    <uses-sdk
        android:minSdkVersion="19"
        android:targetSdkVersion="34" /> <!-- 确保 targetSdkVersion 与 app/build.gradle 一致 -->

    <!-- meta-data 通常放在 application 内部，但放在 manifest 根下也可以 -->
    <!-- 如果这些是用于构建脚本或库，放在这里可能没问题，但更常见的是在 application 内 -->
    <meta-data
        android:name="VERSION_NAME"
        android:value="Beta1.0" />
    <meta-data
        android:name="VERSION_CODE"
        android:value="20250504" /> <!-- 这个值应该与 app/build.gradle 中的 versionCode 匹配或由其生成 -->

</manifest>
<!-- 确保 manifest 标签后面没有任何内容 -->
<uses-permission android:name="android.permission.REQUEST_INSTALL_PACKAGES"/>
<uses-permission android:name="android.permission.READ_EXTERNAL_STORAGE"/>
<?xml version="1.0" encoding="utf-8"?>
<manifest xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:tools="http://schemas.android.com/tools">

    <!-- 权限声明应该放在这里 -->
    <uses-permission android:name="android.permission.REQUEST_INSTALL_PACKAGES"/>
    <!-- READ_EXTERNAL_STORAGE 在 Android 13 (API 33) 及以上不再需要明确声明来读取媒体文件，
         但如果需要访问非媒体文件或兼容旧版本，可能仍需保留。
         如果你的 targetSdk 是 33 或更高，并且只需要访问媒体文件，可以考虑移除这个权限。
         如果需要访问所有文件，需要 MANAGE_EXTERNAL_STORAGE (需要特殊申请)。
         这里暂时保留，但请根据实际需求评估。 -->
    <uses-permission android:name="android.permission.READ_EXTERNAL_STORAGE"
                     android:maxSdkVersion="32" /> <!-- 建议添加 maxSdkVersion -->


    <application
        android:allowBackup="true"
        android:icon="@mipmap/ic_launcher"
        android:label="@string/app_name"
        android:supportsRtl="true"
        android:theme="@style/Theme.MaterialComponents.DayNight"
        tools:targetApi="19"> <!-- 注意：targetApi 在 application 标签通常用于覆盖特定属性，全局目标 API 由 targetSdkVersion 控制 -->
        <activity android:name=".MainActivity"
            android:exported="true">
            <intent-filter>
                <action android:name="android.intent.action.MAIN" />
                <category android:name="android.intent.category.LAUNCHER" />
            </intent-filter>
        </activity>
        <activity android:name=".SettingsActivity"/>
        <activity android:name=".AboutActivity"/>
    </application>

    <!-- uses-sdk 应该放在 application 外部 -->
    <uses-sdk
        android:minSdkVersion="19"
        android:targetSdkVersion="34" /> <!-- 确保 targetSdkVersion 与 app/build.gradle 一致 -->

    <!-- meta-data 通常放在 application 内部，但放在 manifest 根下也可以 -->
    <!-- 如果这些是用于构建脚本或库，放在这里可能没问题，但更常见的是在 application 内 -->
    <meta-data
        android:name="VERSION_NAME"
        android:value="Beta1.0" />
    <meta-data
        android:name="VERSION_CODE"
        android:value="20250504" /> <!-- 这个值应该与 app/build.gradle 中的 versionCode 匹配或由其生成 -->

</manifest>
<!-- 确保 manifest 标签后面没有任何内容 -->
<uses-permission android:name="android.permission.REQUEST_INSTALL_PACKAGES"/>
<uses-permission android:name="android.permission.READ_EXTERNAL_STORAGE"/>
<?xml version="1.0" encoding="utf-8"?>
<manifest xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:tools="http://schemas.android.com/tools">

    <!-- 权限声明应该放在这里 -->
    <uses-permission android:name="android.permission.REQUEST_INSTALL_PACKAGES"/>
    <!-- READ_EXTERNAL_STORAGE 在 Android 13 (API 33) 及以上不再需要明确声明来读取媒体文件，
         但如果需要访问非媒体文件或兼容旧版本，可能仍需保留。
         如果你的 targetSdk 是 33 或更高，并且只需要访问媒体文件，可以考虑移除这个权限。
         如果需要访问所有文件，需要 MANAGE_EXTERNAL_STORAGE (需要特殊申请)。
         这里暂时保留，但请根据实际需求评估。 -->
    <uses-permission android:name="android.permission.READ_EXTERNAL_STORAGE"
                     android:maxSdkVersion="32" /> <!-- 建议添加 maxSdkVersion -->


    <application
        android:allowBackup="true"
        android:icon="@mipmap/ic_launcher"
        android:label="@string/app_name"
        android:supportsRtl="true"
        android:theme="@style/Theme.MaterialComponents.DayNight"
        tools:targetApi="19"> <!-- 注意：targetApi 在 application 标签通常用于覆盖特定属性，全局目标 API 由 targetSdkVersion 控制 -->
        <activity android:name=".MainActivity"
            android:exported="true">
            <intent-filter>
                <action android:name="android.intent.action.MAIN" />
                <category android:name="android.intent.category.LAUNCHER" />
            </intent-filter>
        </activity>
        <activity android:name=".SettingsActivity"/>
        <activity android:name=".AboutActivity"/>
    </application>

    <!-- uses-sdk 应该放在 application 外部 -->
    <uses-sdk
        android:minSdkVersion="19"
        android:targetSdkVersion="34" /> <!-- 确保 targetSdkVersion 与 app/build.gradle 一致 -->

    <!-- meta-data 通常放在 application 内部，但放在 manifest 根下也可以 -->
    <!-- 如果这些是用于构建脚本或库，放在这里可能没问题，但更常见的是在 application 内 -->
    <meta-data
        android:name="VERSION_NAME"
        android:value="Beta1.0" />
    <meta-data
        android:name="VERSION_CODE"
        android:value="20250504" /> <!-- 这个值应该与 app/build.gradle 中的 versionCode 匹配或由其生成 -->

</manifest>
<!-- 确保 manifest 标签后面没有任何内容 -->
<uses-permission android:name="android.permission.REQUEST_INSTALL_PACKAGES"/>
<uses-permission android:name="android.permission.READ_EXTERNAL_STORAGE"/>
<?xml version="1.0" encoding="utf-8"?>
<manifest xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:tools="http://schemas.android.com/tools">

    <!-- 权限声明应该放在这里 -->
    <uses-permission android:name="android.permission.REQUEST_INSTALL_PACKAGES"/>
    <!-- READ_EXTERNAL_STORAGE 在 Android 13 (API 33) 及以上不再需要明确声明来读取媒体文件，
         但如果需要访问非媒体文件或兼容旧版本，可能仍需保留。
         如果你的 targetSdk 是 33 或更高，并且只需要访问媒体文件，可以考虑移除这个权限。
         如果需要访问所有文件，需要 MANAGE_EXTERNAL_STORAGE (需要特殊申请)。
         这里暂时保留，但请根据实际需求评估。 -->
    <uses-permission android:name="android.permission.READ_EXTERNAL_STORAGE"
                     android:maxSdkVersion="32" /> <!-- 建议添加 maxSdkVersion -->


    <application
        android:allowBackup="true"
        android:icon="@mipmap/ic_launcher"
        android:label="@string/app_name"
        android:supportsRtl="true"
        android:theme="@style/Theme.MaterialComponents.DayNight"
        tools:targetApi="19"> <!-- 注意：targetApi 在 application 标签通常用于覆盖特定属性，全局目标 API 由 targetSdkVersion 控制 -->
        <activity android:name=".MainActivity"
            android:exported="true">
            <intent-filter>
                <action android:name="android.intent.action.MAIN" />
                <category android:name="android.intent.category.LAUNCHER" />
            </intent-filter>
        </activity>
        <activity android:name=".SettingsActivity"/>
        <activity android:name=".AboutActivity"/>
    </application>

    <!-- uses-sdk 应该放在 application 外部 -->
    <uses-sdk
        android:minSdkVersion="19"
        android:targetSdkVersion="34" /> <!-- 确保 targetSdkVersion 与 app/build.gradle 一致 -->

    <!-- meta-data 通常放在 application 内部，但放在 manifest 根下也可以 -->
    <!-- 如果这些是用于构建脚本或库，放在这里可能没问题，但更常见的是在 application 内 -->
    <meta-data
        android:name="VERSION_NAME"
        android:value="Beta1.0" />
    <meta-data
        android:name="VERSION_CODE"
        android:value="20250504" /> <!-- 这个值应该与 app/build.gradle 中的 versionCode 匹配或由其生成 -->

</manifest>
<!-- 确保 manifest 标签后面没有任何内容 -->
<uses-permission android:name="android.permission.REQUEST_INSTALL_PACKAGES"/>
<uses-permission android:name="android.permission.READ_EXTERNAL_STORAGE"/>
<?xml version="1.0" encoding="utf-8"?>
<manifest xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:tools="http://schemas.android.com/tools">

    <!-- 权限声明应该放在这里 -->
    <uses-permission android:name="android.permission.REQUEST_INSTALL_PACKAGES"/>
    <!-- READ_EXTERNAL_STORAGE 在 Android 13 (API 33) 及以上不再需要明确声明来读取媒体文件，
         但如果需要访问非媒体文件或兼容旧版本，可能仍需保留。
         如果你的 targetSdk 是 33 或更高，并且只需要访问媒体文件，可以考虑移除这个权限。
         如果需要访问所有文件，需要 MANAGE_EXTERNAL_STORAGE (需要特殊申请)。
         这里暂时保留，但请根据实际需求评估。 -->
    <uses-permission android:name="android.permission.READ_EXTERNAL_STORAGE"
                     android:maxSdkVersion="32" /> <!-- 建议添加 maxSdkVersion -->


    <application
        android:allowBackup="true"
        android:icon="@mipmap/ic_launcher"
        android:label="@string/app_name"
        android:supportsRtl="true"
        android:theme="@style/Theme.MaterialComponents.DayNight"
        tools:targetApi="19"> <!-- 注意：targetApi 在 application 标签通常用于覆盖特定属性，全局目标 API 由 targetSdkVersion 控制 -->
        <activity android:name=".MainActivity"
            android:exported="true">
            <intent-filter>
                <action android:name="android.intent.action.MAIN" />
                <category android:name="android.intent.category.LAUNCHER" />
            </intent-filter>
        </activity>
        <activity android:name=".SettingsActivity"/>
        <activity android:name=".AboutActivity"/>
    </application>

    <!-- uses-sdk 应该放在 application 外部 -->
    <uses-sdk
        android:minSdkVersion="19"
        android:targetSdkVersion="34" /> <!-- 确保 targetSdkVersion 与 app/build.gradle 一致 -->

    <!-- meta-data 通常放在 application 内部，但放在 manifest 根下也可以 -->
    <!-- 如果这些是用于构建脚本或库，放在这里可能没问题，但更常见的是在 application 内 -->
    <meta-data
        android:name="VERSION_NAME"
        android:value="Beta1.0" />
    <meta-data
        android:name="VERSION_CODE"
        android:value="20250504" /> <!-- 这个值应该与 app/build.gradle 中的 versionCode 匹配或由其生成 -->

</manifest>
<!-- 确保 manifest 标签后面没有任何内容 -->
<uses-permission android:name="android.permission.REQUEST_INSTALL_PACKAGES"/>
<uses-permission android:name="android.permission.READ_EXTERNAL_STORAGE"/>
<?xml version="1.0" encoding="utf-8"?>
<manifest xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:tools="http://schemas.android.com/tools">

    <!-- 权限声明应该放在这里 -->
    <uses-permission android:name="android.permission.REQUEST_INSTALL_PACKAGES"/>
    <!-- READ_EXTERNAL_STORAGE 在 Android 13 (API 33) 及以上不再需要明确声明来读取媒体文件，
         但如果需要访问非媒体文件或兼容旧版本，可能仍需保留。
         如果你的 targetSdk 是 33 或更高，并且只需要访问媒体文件，可以考虑移除这个权限。
         如果需要访问所有文件，需要 MANAGE_EXTERNAL_STORAGE (需要特殊申请)。
         这里暂时保留，但请根据实际需求评估。 -->
    <uses-permission android:name="android.permission.READ_EXTERNAL_STORAGE"
                     android:maxSdkVersion="32" /> <!-- 建议添加 maxSdkVersion -->


    <application
        android:allowBackup="true"
        android:icon="@mipmap/ic_launcher"
        android:label="@string/app_name"
        android:supportsRtl="true"
        android:theme="@style/Theme.MaterialComponents.DayNight"
        tools:targetApi="19"> <!-- 注意：targetApi 在 application 标签通常用于覆盖特定属性，全局目标 API 由 targetSdkVersion 控制 -->
        <activity android:name=".MainActivity"
            android:exported="true">
            <intent-filter>
                <action android:name="android.intent.action.MAIN" />
                <category android:name="android.intent.category.LAUNCHER" />
            </intent-filter>
        </activity>
        <activity android:name=".SettingsActivity"/>
        <activity android:name=".AboutActivity"/>
    </application>

    <!-- uses-sdk 应该放在 application 外部 -->
    <uses-sdk
        android:minSdkVersion="19"
        android:targetSdkVersion="34" /> <!-- 确保 targetSdkVersion 与 app/build.gradle 一致 -->

    <!-- meta-data 通常放在 application 内部，但放在 manifest 根下也可以 -->
    <!-- 如果这些是用于构建脚本或库，放在这里可能没问题，但更常见的是在 application 内 -->
    <meta-data
        android:name="VERSION_NAME"
        android:value="Beta1.0" />
    <meta-data
        android:name="VERSION_CODE"
        android:value="20250504" /> <!-- 这个值应该与 app/build.gradle 中的 versionCode 匹配或由其生成 -->

</manifest>
<!-- 确保 manifest 标签后面没有任何内容 -->
<uses-permission android:name="android.permission.REQUEST_INSTALL_PACKAGES"/>
<uses-permission android:name="android.permission.READ_EXTERNAL_STORAGE"/>
<?xml version="1.0" encoding="utf-8"?>
<manifest xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:tools="http://schemas.android.com/tools">

    <!-- 权限声明应该放在这里 -->
    <uses-permission android:name="android.permission.REQUEST_INSTALL_PACKAGES"/>
    <!-- READ_EXTERNAL_STORAGE 在 Android 13 (API 33) 及以上不再需要明确声明来读取媒体文件，
         但如果需要访问非媒体文件或兼容旧版本，可能仍需保留。
         如果你的 targetSdk 是 33 或更高，并且只需要访问媒体文件，可以考虑移除这个权限。
         如果需要访问所有文件，需要 MANAGE_EXTERNAL_STORAGE (需要特殊申请)。
         这里暂时保留，但请根据实际需求评估。 -->
    <uses-permission android:name="android.permission.READ_EXTERNAL_STORAGE"
                     android:maxSdkVersion="32" /> <!-- 建议添加 maxSdkVersion -->


    <application
        android:allowBackup="true"
        android:icon="@mipmap/ic_launcher"
        android:label="@string/app_name"
        android:supportsRtl="true"
        android:theme="@style/Theme.MaterialComponents.DayNight"
        tools:targetApi="19"> <!-- 注意：targetApi 在 application 标签通常用于覆盖特定属性，全局目标 API 由 targetSdkVersion 控制 -->
        <activity android:name=".MainActivity"
            android:exported="true">
            <intent-filter>
                <action android:name="android.intent.action.MAIN" />
                <category android:name="android.intent.category.LAUNCHER" />
            </intent-filter>
        </activity>
        <activity android:name=".SettingsActivity"/>
        <activity android:name=".AboutActivity"/>
    </application>

    <!-- uses-sdk 应该放在 application 外部 -->
    <uses-sdk
        android:minSdkVersion="19"
        android:targetSdkVersion="34" /> <!-- 确保 targetSdkVersion 与 app/build.gradle 一致 -->

    <!-- meta-data 通常放在 application 内部，但放在 manifest 根下也可以 -->
    <!-- 如果这些是用于构建脚本或库，放在这里可能没问题，但更常见的是在 application 内 -->
    <meta-data
        android:name="VERSION_NAME"
        android:value="Beta1.0" />
    <meta-data
        android:name="VERSION_CODE"
        android:value="20250504" /> <!-- 这个值应该与 app/build.gradle 中的 versionCode 匹配或由其生成 -->

</manifest>
<!-- 确保 manifest 标签后面没有任何内容 -->
<uses-permission android:name="android.permission.REQUEST_INSTALL_PACKAGES"/>
<uses-permission android:name="android.permission.READ_EXTERNAL_STORAGE"/>
<?xml version="1.0" encoding="utf-8"?>
<manifest xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:tools="http://schemas.android.com/tools">

    <!-- 权限声明应该放在这里 -->
    <uses-permission android:name="android.permission.REQUEST_INSTALL_PACKAGES"/>
    <!-- READ_EXTERNAL_STORAGE 在 Android 13 (API 33) 及以上不再需要明确声明来读取媒体文件，
         但如果需要访问非媒体文件或兼容旧版本，可能仍需保留。
         如果你的 targetSdk 是 33 或更高，并且只需要访问媒体文件，可以考虑移除这个权限。
         如果需要访问所有文件，需要 MANAGE_EXTERNAL_STORAGE (需要特殊申请)。
         这里暂时保留，但请根据实际需求评估。 -->
    <uses-permission android:name="android.permission.READ_EXTERNAL_STORAGE"
                     android:maxSdkVersion="32" /> <!-- 建议添加 maxSdkVersion -->


    <application
        android:allowBackup="true"
        android:icon="@mipmap/ic_launcher"
        android:label="@string/app_name"
        android:supportsRtl="true"
        android:theme="@style/Theme.MaterialComponents.DayNight"
        tools:targetApi="19"> <!-- 注意：targetApi 在 application 标签通常用于覆盖特定属性，全局目标 API 由 targetSdkVersion 控制 -->
        <activity android:name=".MainActivity"
            android:exported="true">
            <intent-filter>
                <action android:name="android.intent.action.MAIN" />
                <category android:name="android.intent.category.LAUNCHER" />
            </intent-filter>
        </activity>
        <activity android:name=".SettingsActivity"/>
        <activity android:name=".AboutActivity"/>
    </application>

    <!-- uses-sdk 应该放在 application 外部 -->
    <uses-sdk
        android:minSdkVersion="19"
        android:targetSdkVersion="34" /> <!-- 确保 targetSdkVersion 与 app/build.gradle 一致 -->

    <!-- meta-data 通常放在 application 内部，但放在 manifest 根下也可以 -->
    <!-- 如果这些是用于构建脚本或库，放在这里可能没问题，但更常见的是在 application 内 -->
    <meta-data
        android:name="VERSION_NAME"
        android:value="Beta1.0" />
    <meta-data
        android:name="VERSION_CODE"
        android:value="20250504" /> <!-- 这个值应该与 app/build.gradle 中的 versionCode 匹配或由其生成 -->

</manifest>
<!-- 确保 manifest 标签后面没有任何内容 -->
<uses-permission android:name="android.permission.REQUEST_INSTALL_PACKAGES"/>
<uses-permission android:name="android.permission.READ_EXTERNAL_STORAGE"/>
<?xml version="1.0" encoding="utf-8"?>
<manifest xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:tools="http://schemas.android.com/tools">

    <!-- 权限声明应该放在这里 -->
    <uses-permission android:name="android.permission.REQUEST_INSTALL_PACKAGES"/>
    <!-- READ_EXTERNAL_STORAGE 在 Android 13 (API 33) 及以上不再需要明确声明来读取媒体文件，
         但如果需要访问非媒体文件或兼容旧版本，可能仍需保留。
         如果你的 targetSdk 是 33 或更高，并且只需要访问媒体文件，可以考虑移除这个权限。
         如果需要访问所有文件，需要 MANAGE_EXTERNAL_STORAGE (需要特殊申请)。
         这里暂时保留，但请根据实际需求评估。 -->
    <uses-permission android:name="android.permission.READ_EXTERNAL_STORAGE"
                     android:maxSdkVersion="32" /> <!-- 建议添加 maxSdkVersion -->


    <application
        android:allowBackup="true"
        android:icon="@mipmap/ic_launcher"
        android:label="@string/app_name"
        android:supportsRtl="true"
        android:theme="@style/Theme.MaterialComponents.DayNight"
        tools:targetApi="19"> <!-- 注意：targetApi 在 application 标签通常用于覆盖特定属性，全局目标 API 由 targetSdkVersion 控制 -->
        <activity android:name=".MainActivity"
            android:exported="true">
            <intent-filter>
                <action android:name="android.intent.action.MAIN" />
                <category android:name="android.intent.category.LAUNCHER" />
            </intent-filter>
        </activity>
        <activity android:name=".SettingsActivity"/>
        <activity android:name=".AboutActivity"/>
    </application>

    <!-- uses-sdk 应该放在 application 外部 -->
    <uses-sdk
        android:minSdkVersion="19"
        android:targetSdkVersion="34" /> <!-- 确保 targetSdkVersion 与 app/build.gradle 一致 -->

    <!-- meta-data 通常放在 application 内部，但放在 manifest 根下也可以 -->
    <!-- 如果这些是用于构建脚本或库，放在这里可能没问题，但更常见的是在 application 内 -->
    <meta-data
        android:name="VERSION_NAME"
        android:value="Beta1.0" />
    <meta-data
        android:name="VERSION_CODE"
        android:value="20250504" /> <!-- 这个值应该与 app/build.gradle 中的 versionCode 匹配或由其生成 -->

</manifest>
<!-- 确保 manifest 标签后面没有任何内容 -->
<uses-permission android:name="android.permission.REQUEST_INSTALL_PACKAGES"/>
<uses-permission android:name="android.permission.READ_EXTERNAL_STORAGE"/>
<?xml version="1.0" encoding="utf-8"?>
<manifest xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:tools="http://schemas.android.com/tools">

    <!-- 权限声明应该放在这里 -->
    <uses-permission android:name="android.permission.REQUEST_INSTALL_PACKAGES"/>
    <!-- READ_EXTERNAL_STORAGE 在 Android 13 (API 33) 及以上不再需要明确声明来读取媒体文件，
         但如果需要访问非媒体文件或兼容旧版本，可能仍需保留。
         如果你的 targetSdk 是 33 或更高，并且只需要访问媒体文件，可以考虑移除这个权限。
         如果需要访问所有文件，需要 MANAGE_EXTERNAL_STORAGE (需要特殊申请)。
         这里暂时保留，但请根据实际需求评估。 -->
    <uses-permission android:name="android.permission.READ_EXTERNAL_STORAGE"
                     android:maxSdkVersion="32" /> <!-- 建议添加 maxSdkVersion -->


    <application
        android:allowBackup="true"
        android:icon="@mipmap/ic_launcher"
        android:label="@string/app_name"
        android:supportsRtl="true"
        android:theme="@style/Theme.MaterialComponents.DayNight"
        tools:targetApi="19"> <!-- 注意：targetApi 在 application 标签通常用于覆盖特定属性，全局目标 API 由 targetSdkVersion 控制 -->
        <activity android:name=".MainActivity"
            android:exported="true">
            <intent-filter>
                <action android:name="android.intent.action.MAIN" />
                <category android:name="android.intent.category.LAUNCHER" />
            </intent-filter>
        </activity>
        <activity android:name=".SettingsActivity"/>
        <activity android:name=".AboutActivity"/>
    </application>

    <!-- uses-sdk 应该放在 application 外部 -->
    <uses-sdk
        android:minSdkVersion="19"
        android:targetSdkVersion="34" /> <!-- 确保 targetSdkVersion 与 app/build.gradle 一致 -->

    <!-- meta-data 通常放在 application 内部，但放在 manifest 根下也可以 -->
    <!-- 如果这些是用于构建脚本或库，放在这里可能没问题，但更常见的是在 application 内 -->
    <meta-data
        android:name="VERSION_NAME"
        android:value="Beta1.0" />
    <meta-data
        android:name="VERSION_CODE"
        android:value="20250504" /> <!-- 这个值应该与 app/build.gradle 中的 versionCode 匹配或由其生成 -->

</manifest>
<!-- 确保 manifest 标签后面没有任何内容 -->
<uses-permission android:name="android.permission.REQUEST_INSTALL_PACKAGES"/>
<uses-permission android:name="android.permission.READ_EXTERNAL_STORAGE"/>
<?xml version="1.0" encoding="utf-8"?>
<manifest xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:tools="http://schemas.android.com/tools">

    <!-- 权限声明应该放在这里 -->
    <uses-permission android:name="android.permission.REQUEST_INSTALL_PACKAGES"/>
    <!-- READ_EXTERNAL_STORAGE 在 Android 13 (API 33) 及以上不再需要明确声明来读取媒体文件，
         但如果需要访问非媒体文件或兼容旧版本，可能仍需保留。
         如果你的 targetSdk 是 33 或更高，并且只需要访问媒体文件，可以考虑移除这个权限。
         如果需要访问所有文件，需要 MANAGE_EXTERNAL_STORAGE (需要特殊申请)。
         这里暂时保留，但请根据实际需求评估。 -->
    <uses-permission android:name="android.permission.READ_EXTERNAL_STORAGE"
                     android:maxSdkVersion="32" /> <!-- 建议添加 maxSdkVersion -->


    <application
        android:allowBackup="true"
        android:icon="@mipmap/ic_launcher"
        android:label="@string/app_name"
        android:supportsRtl="true"
        android:theme="@style/Theme.MaterialComponents.DayNight"
        tools:targetApi="19"> <!-- 注意：targetApi 在 application 标签通常用于覆盖特定属性，全局目标 API 由 targetSdkVersion 控制 -->
        <activity android:name=".MainActivity"
            android:exported="true">
            <intent-filter>
                <action android:name="android.intent.action.MAIN" />
                <category android:name="android.intent.category.LAUNCHER" />
            </intent-filter>
        </activity>
        <activity android:name=".SettingsActivity"/>
        <activity android:name=".AboutActivity"/>
    </application>

    <!-- uses-sdk 应该放在 application 外部 -->
